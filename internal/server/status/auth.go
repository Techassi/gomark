package status

import (
	"net/http"
)

////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// GENERAL STATUS ///////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// AuthInvalidCredentials represents the status when the provided credentials
// are inavlid, meaning they can't be found, the combination of username and
// password doesn't exist or the password is wrong.
func AuthInvalidCredentials() map[string]interface{} {
	return map[string]interface{}{
		"scope":   "auth",
		"message": "invalid_credentials",
		"detail":  "Your credentials are invalid.",
	}
}

// AuthInvalidNewCredentials represents the status when the provided credentials
// are inavlid, meaning they don't check all requirements for new credentials.
func AuthInvalidNewCredentials() map[string]interface{} {
	return map[string]interface{}{
		"scope":   "auth",
		"message": "invalid_new_credentials",
		"detail":  "Your new credentials are invalid.",
	}
}

////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// SIGNIN STATUS ////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// AuthSuccessfullySignedIn respresents the status when the user got
// successfully signed in
func AuthSuccessfullySignedIn() map[string]interface{} {
	return map[string]interface{}{
		"scope":   "auth",
		"message": "signed_in",
		"detail":  "You are successfully signed in.",
	}
}

// AuthAlreadySignedIn respresents the status when the user tries to login but
// is already signed in
func AuthAlreadySignedIn() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusOK,
		"scope":   "auth",
		"message": "already_signed_in",
		"detail":  "You are already signed in.",
	}
}

////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// REGISTER STATUS ///////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// AuthSuccessfullyRegistered respresents the status when the user got
// successfully registered
func AuthSuccessfullyRegistered() map[string]interface{} {
	return map[string]interface{}{
		"scope":   "auth",
		"message": "registered",
		"detail":  "You are successfully registered.",
	}
}

// AuthNotRegistered respresents the status when the user got
// successfully registered
func AuthNotRegistered() map[string]interface{} {
	return map[string]interface{}{
		"scope":   "auth",
		"message": "not_registered",
		"detail":  "The server encountered an internal error, please try again.",
	}
}

////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// 2FA STATUS /////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

func Auth2FARequired() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusOK,
		"scope":   "auth",
		"message": "2fa_required",
		"detail":  "A 2FA Code is required to login.",
	}
}

////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// 2FA ERRORS /////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Auth2FASecretError respresents the status when the 2FA random Secret could
// not be created / generated by the crypto/rand function
func Auth2FASecretError() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusInternalServerError,
		"scope":   "auth",
		"message": "2fa_secret_error",
		"detail":  "The 2FA secret could not be created.",
	}
}

// Auth2FAUriError respresents the status when the 2FA URI could not be
// created / generated. The URI is structured like otpauth://TYPE/LABEL?PARAMETERS.
// See https://github.com/google/google-authenticator/wiki/Key-Uri-Format for more
// information
func Auth2FAUriError() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusInternalServerError,
		"scope":   "auth",
		"message": "2fa_uri_error",
		"detail":  "The 2FA uri could not be created.",
	}
}

// Auth2FAQRCodeError represents the status when the 2FA QR code could not be
// generated
func Auth2FAQRCodeError() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusInternalServerError,
		"scope":   "auth",
		"message": "2fa_qr_code_error",
		"detail":  "The 2FA QR code could not be generated.",
	}
}

// Auth2FATempTokenCreateError represents the status when the temporary 2FA token
// could not be generated
func Auth2FATempTokenCreateError() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusInternalServerError,
		"scope":   "auth",
		"message": "2fa_temp_token_creation_error",
		"detail":  "The 2FA temp token could not be created.",
	}
}

func Auth2FATempTokenError() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusUnauthorized,
		"scope":   "auth",
		"message": "2fa_temp_token_error",
		"detail":  "The 2FA temp token is not set or invalid.",
	}
}

func Auth2FAAuthenticationError() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusUnauthorized,
		"scope":   "auth",
		"message": "2fa_authentication_error",
		"detail":  "The 2FA code is invalid.",
	}
}

////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// JWT ERRORS /////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

func AuthJWTTokenSigningError(e error) map[string]interface{} {
	return map[string]interface{}{
		"scope":   "auth",
		"message": "jwt_token_signing_error",
		"detail":  "The JWT token could not be signed.",
		"details": e,
	}
}
