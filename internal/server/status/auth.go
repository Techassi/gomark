package status

import (
	"net/http"

	"github.com/labstack/echo/v4"
)

/////////////////////////////////////////////
////////////////// GENERAL //////////////////
/////////////////////////////////////////////

// AUTH_InvalidCredentials represents the status when the provided credentials
// are inavlid, meaning the can't be found, the combination of username and password
// doesn't exist or the password is wrong.
func AUTH_InvalidCredentials(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"status":  http.StatusUnauthorized,
		"scope":   "auth",
		"error":   "invalid_credentials",
		"message": "Your credentials are invalid.",
	})
}

// AUTH_SuccessfullySignedIn respresents the status when the user got successfully
// signed in
func AUTH_SuccessfullySignedIn(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"status":  http.StatusOK,
		"scope":   "auth",
		"error":   "null",
		"message": "You are successfully signed in.",
	})
}

// AUTH_AlreadySignedIn respresents the status when the user tries to login but
// is already signed in
func AUTH_AlreadySignedIn(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"status":  http.StatusOK,
		"scope":   "auth",
		"error":   "already_signed_in",
		"message": "You are already signed in.",
	})
}

/////////////////////////////////////////////
//////////////// 2FA ERRORS /////////////////
/////////////////////////////////////////////

// AUTH_2FASecretError respresents the status when the 2FA random Secret could
// not be created / generated by the crypto/rand function
func AUTH_2FASecretError(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"status":  http.StatusInternalServerError,
		"scope":   "auth",
		"error":   "2fa_secret_error",
		"message": "The 2FA secret could not be created.",
	})
}

// AUTH_2FAUriError respresents the status when the 2FA URI could not be
// created / generated. The URI is structured like otpauth://TYPE/LABEL?PARAMETERS.
// See https://github.com/google/google-authenticator/wiki/Key-Uri-Format for more
// information
func AUTH_2FAUriError(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"status":  http.StatusInternalServerError,
		"scope":   "auth",
		"error":   "2fa_uri_error",
		"message": "The 2FA uri could not be created.",
	})
}

// AUTH_2FAQRCodeError represents the status when the 2FA QR code could not be
// generated
func AUTH_2FAQRCodeError(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"status":  http.StatusInternalServerError,
		"scope":   "auth",
		"error":   "2fa_qr_code_error",
		"message": "The 2FA QR code could not be generated.",
	})
}

// AUTH_2FATempTokenCreateError represents the status when the temporary 2FA token
// could not be generated
func AUTH_2FATempTokenCreateError(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"status":  http.StatusInternalServerError,
		"scope":   "auth",
		"error":   "2fa_temp_token_creation_error",
		"message": "The 2FA temp token could not be created.",
	})
}

func AUTH_2FATempTokenError(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"status":  http.StatusUnauthorized,
		"scope":   "auth",
		"error":   "2fa_temp_token_error",
		"message": "The 2FA temp token is not set.",
	})
}

func AUTH_2FAAuthenticationError(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"status":  http.StatusUnauthorized,
		"scope":   "auth",
		"error":   "2fa_authentication_error",
		"message": "The 2FA code is invalid.",
	})
}

/////////////////////////////////////////////
//////////////// JWT ERRORS /////////////////
/////////////////////////////////////////////

func AUTH_JWTTokenSigningError(c echo.Context, e error) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"status":  http.StatusInternalServerError,
		"scope":   "auth",
		"error":   "jwt_token_signing_error",
		"message": "The JWT token could not be signed.",
		"details": e,
	})
}
