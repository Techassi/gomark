package status

import (
	"net/http"
)

////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// GENERAL STATUS ///////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// AUTH_InvalidCredentials represents the status when the provided credentials
// are inavlid, meaning they can't be found, the combination of username and
// password doesn't exist or the password is wrong.
func AUTH_InvalidCredentials() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusUnauthorized,
		"scope":   "auth",
		"error":   "invalid_credentials",
		"message": "Your credentials are invalid.",
	}
}

// AUTH_InvalidNewCredentials represents the status when the provided credentials
// are inavlid, meaning they don't check all requirements for new credentials.
func AUTH_InvalidNewCredentials() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusUnauthorized,
		"scope":   "auth",
		"error":   "invalid_new_credentials",
		"message": "Your new credentials are invalid.",
	}
}

////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// SIGNIN STATUS ////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// AUTH_SuccessfullySignedIn respresents the status when the user got
// successfully signed in
func AUTH_SuccessfullySignedIn() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusOK,
		"scope":   "auth",
		"error":   "null",
		"message": "You are successfully signed in.",
	}
}

// AUTH_AlreadySignedIn respresents the status when the user tries to login but
// is already signed in
func AUTH_AlreadySignedIn() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusOK,
		"scope":   "auth",
		"error":   "already_signed_in",
		"message": "You are already signed in.",
	}
}

////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// REGISTER STATUS ///////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// AUTH_SuccessfullyRegistered respresents the status when the user got
// successfully registered
func AUTH_SuccessfullyRegistered() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusOK,
		"scope":   "auth",
		"error":   "null",
		"message": "You are successfully registered.",
	}
}

// AUTH_NotRegistered respresents the status when the user got
// successfully registered
func AUTH_NotRegistered() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusInternalServerError,
		"scope":   "auth",
		"error":   "not_registered",
		"message": "The server encountered an internal error, please try again.",
	}
}

////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// 2FA ERRORS /////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// AUTH_2FASecretError respresents the status when the 2FA random Secret could
// not be created / generated by the crypto/rand function
func AUTH_2FASecretError() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusInternalServerError,
		"scope":   "auth",
		"error":   "2fa_secret_error",
		"message": "The 2FA secret could not be created.",
	}
}

// AUTH_2FAUriError respresents the status when the 2FA URI could not be
// created / generated. The URI is structured like otpauth://TYPE/LABEL?PARAMETERS.
// See https://github.com/google/google-authenticator/wiki/Key-Uri-Format for more
// information
func AUTH_2FAUriError() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusInternalServerError,
		"scope":   "auth",
		"error":   "2fa_uri_error",
		"message": "The 2FA uri could not be created.",
	}
}

// AUTH_2FAQRCodeError represents the status when the 2FA QR code could not be
// generated
func AUTH_2FAQRCodeError() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusInternalServerError,
		"scope":   "auth",
		"error":   "2fa_qr_code_error",
		"message": "The 2FA QR code could not be generated.",
	}
}

// AUTH_2FATempTokenCreateError represents the status when the temporary 2FA token
// could not be generated
func AUTH_2FATempTokenCreateError() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusInternalServerError,
		"scope":   "auth",
		"error":   "2fa_temp_token_creation_error",
		"message": "The 2FA temp token could not be created.",
	}
}

func AUTH_2FATempTokenError() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusUnauthorized,
		"scope":   "auth",
		"error":   "2fa_temp_token_error",
		"message": "The 2FA temp token is not set or invalid.",
	}
}

func AUTH_2FAAuthenticationError() map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusUnauthorized,
		"scope":   "auth",
		"error":   "2fa_authentication_error",
		"message": "The 2FA code is invalid.",
	}
}

////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// JWT ERRORS /////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

func AUTH_JWTTokenSigningError(e error) map[string]interface{} {
	return map[string]interface{}{
		"status":  http.StatusInternalServerError,
		"scope":   "auth",
		"error":   "jwt_token_signing_error",
		"message": "The JWT token could not be signed.",
		"details": e,
	}
}
